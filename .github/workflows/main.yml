name: Build/release

on:
  push:
    branches:
      - main-v2
      - feature/*
    tags:
      - v*
  pull_request:
    branches:
      - main-v2
      
# env:
#   DEBUG: '*'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Restore Reanimated node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-reanimated-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-modules-reanimated-

      - name: Install Reanimated node_modules
        run: yarn install --frozen-lockfile

      - name: Restore app node_modules from cache
        uses: actions/cache@v3
        with:
          path: ${{ env.WORKING_DIRECTORY }}/node_modules
          key: ${{ runner.os }}-node-modules-${{ env.WORKING_DIRECTORY }}-${{ hashFiles(format('{0}/yarn.lock', env.WORKING_DIRECTORY)) }}
          restore-keys: ${{ runner.os }}-node-modules-${{ env.WORKING_DIRECTORY }}-

      - name: Install app node_modules
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn install --frozen-lockfile

      - name: Restore Pods from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKING_DIRECTORY }}/ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ env.WORKING_DIRECTORY }}-${{ hashFiles(format('{0}/ios/Podfile.lock', env.WORKING_DIRECTORY)) }}

      - name: Install Pods
        working-directory: ${{ env.WORKING_DIRECTORY }}/ios
        run: pod install

      - name: Restore build artifacts from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKING_DIRECTORY }}/ios/build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-tvos-build-${{ env.WORKING_DIRECTORY }}-${{ hashFiles(format('{0}/ios/Podfile.lock', env.WORKING_DIRECTORY)) }}

      - name: Build app
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn tvos
  lint:
    name: Lint code

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 18
      
      - name: Set up node_modules cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            node_modules/
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-npm-

      - name: Install yarn dependencies
        run: yarn

      - name: Lint code
        run: yarn lint


  tests:
    name: Run playwright tests
    runs-on: macos-latest
    needs: ['lint']
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 18
      
      - name: Set up node_modules cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            node_modules/
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-npm-

      - name: Install yarn dependencies
        run: yarn

      - name: Run tests
        run: yarn test
        env:
          XBOX_USERNAME: ${{ secrets.XBOX_USERNAME }}
          XBOX_PASSWORD: ${{ secrets.XBOX_PASSWORD }}


  cachedeps:
    name: Generate cached sources
    runs-on: macos-latest
    needs: ['tests']

    steps:
      # Intsall node tools
      - uses: actions/checkout@v4
        with:
          repository: 'flatpak/flatpak-builder-tools'

      - name: Install Python deps
        run: pip3 install aiohttp toml

      - name: Install flatpak-builder-tools
        run: pipx install ./node/

      # Generate sources
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # clean: true

      - name: Prep artifacts dir
        run: mkdir ./deps-dist/

      - name: Build yarn cache
        run: flatpak-node-generator yarn yarn.lock -o ./deps-dist/yarn-sources.json

      - uses: actions/upload-artifact@master
        with:
          name: flatpak-sources
          path: ./deps-dist/

  flatpak:
    name: Flatpak Build
    runs-on: macos-latest
    needs: [cachedeps]

    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-45
      options: --privileged

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/download-artifact@master
        with:
          name: flatpak-sources
          path: flatpak/

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 18

      - name: Set up flatpak build cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            build/
            .flatpak-builder/
            flatpak-node/
          key: ${{ runner.os }}-${{ runner.arch }}-flatpak-builder-${{ hashFiles('flatpak/*') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-flatpak-builder-

      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: greenlight.flatpak
          manifest-path: flatpak/io.github.unknownskl.greenlight.yml
          cache-key: flatpak-builder-${{ github.sha }}

      - name: Release flatpak
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: greenlight.flatpak
          draft: true

  release:
    name: Build/release Electron app
    runs-on: ${{ matrix.os }}
    needs: ['tests']

    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 18

      - name: Set up node_modules cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            node_modules/
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-npm-

      - name: Install yarn dependencies
        run: yarn

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        # if: startsWith(github.ref, 'refs/tags/v') 
        
      - name: Publish tvOS APP
        uses: actions/upload-artifact@v4
        with:
          name: greenlight-tvos.ipa
          path: |
            dist/*.ipa
        if: matrix.os == 'macos-latest' && contains(github.event.head_commit.message, '[build]')
